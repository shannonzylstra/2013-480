︠2ad85228-80d9-4784-a1fe-c8a7f5f7b76d︠
md(open('final_projects.md').read())
︡189f5ffc-e6a6-47dc-bab4-ef18eece52cd︡{"html":"<h1>Final Projects</h1>\n\n<p>5-minute <a href=\"http://en.wikipedia.org/wiki/Lightning_talk\">lightning talks</a></p>\n\n<h2>Monday, June ??</h2>\n\n<ul>\n<li><p><strong>Polygons</strong> (Mary &amp; Rebecca): 2d polygon class, intersections, areas, etc.; done currently by the Sage Polyhedral class.  Improve documentation.</p></li>\n<li><p><strong>Billera-Lee Polytopes</strong> (Jose): Construct Billera-Lee polytopes (for Ph.D. research) using combination of Sage and polymake&#8230; but Sage has a lot hidden for this.</p></li>\n<li><p><strong>The Simplex Algorithm</strong> (Andrea): Simplex algorithm for optimization.   (cvxopt package; always give inputs like float(2.3) rather than 2.3; or put percent &#8220;python\")</p></li>\n<li><p><strong>A Simplex Algorithm tutorial</strong> (Brian &amp; Mellisa): simplex algorithm, min/max; TUTORIAL. Graphically visualize each step.</p></li>\n<li><p><strong>Optimization</strong> (Gary): Optimization.  Making some functionality of cvxopt more user friendly&#8230;</p></li>\n<li><p><strong>Thin SVD</strong> (Taylor &amp; James): thin SVD (remove some columns); something new</p></li>\n</ul>\n\n<h2>Wednesday, June ??</h2>\n\n<ul>\n<li><p><strong>Black-Scholes</strong> (Brian Manion)</p></li>\n<li><p><strong>Markov Process</strong> (Mark): raw data; updating transitional matrix.  markov process.  (see stats.hmm)</p></li>\n<li><p><strong>Real World Graphs</strong> (Clara): Sage graphs using &#8220;real world&#8221; data.</p></li>\n<li><p><strong>Statistics Data</strong> (Tian Yu): Sage/Python &lt;&#8212;> statistics data.  Given a bunch of data, you give feedback. Consider <a href=\"http://statsmodels.sourceforge.net/\">http://statsmodels.sourceforge.net/</a> which is in cloud.sagemath.</p></li>\n<li><p><strong>Game of GO AI</strong> (Sean &amp; Alex &amp; Daae): game of GO AI;   human versus computer.</p></li>\n<li><p><strong>Tic-Tac-Toe</strong> (Jasper): AI engine for 2-player game. Implement n x m tic-tac-toe <em>and</em> obstacles.  Find the best move.</p></li>\n</ul>\n\n<h2>Friday, June ??</h2>\n\n<ul>\n<li><p><strong>Musical Tempered Scale</strong> (Kippy):  make your own musical scale.</p></li>\n<li><p><strong>The Golden Ratio</strong> (Trevor): exploring <code>golden_ratio</code></p></li>\n<li><p><strong>Improve logic.py</strong> (Dwight &amp; Tannor): the logic.py file (beginner sage tickets).</p></li>\n<li><p><strong>Logic</strong> (Jessica, maybe group of 3): logic (?)</p></li>\n<li><p><strong>Challenge Problems</strong> (Hon, Hao, Wu, Qian):</p>\n\n<ol>\n<li>challenge problem &#8211; pos integer in binary; put + digits in compute sum, get another binary number.  Is there a number  c so that any number goes to 1 in at most c steps.</li>\n<li>Computing Fermat points &#8211; m points in R^d; find one point so that the sum of the distance to the m points is minimized. Three algorithms to solve&#8230; which is best.  Use cvxopt to implement one of them.</li>\n</ol></li>\n<li><p><strong>Elliptic Curve Diffie-Hellman</strong> (Josh): implement elliptic curve cryptosystem&#8230; Diffie-Hellman.  Koblitz book on this.</p></li>\n</ul>\n"}︡
︠d7aac099-cc66-457f-894e-0ccdf2e606a4︠

